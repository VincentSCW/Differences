// <auto-generated />
using Differences.DataAccess;
using Differences.Interaction.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Differences.DataAccess.Migrations
{
    [DbContext(typeof(DifferencesDbContext))]
    partial class DifferencesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Differences.Interaction.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime?>("LastUpdateTime");

                    b.Property<Guid?>("LastUpdatedBy");

                    b.Property<Guid>("OwnerId");

                    b.Property<int?>("ParentReplyId");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Differences.Interaction.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime?>("LastUpdateTime");

                    b.Property<Guid?>("LastUpdatedBy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Differences.Interaction.Models.ArticleUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime?>("LastUpdateTime");

                    b.Property<Guid?>("LastUpdatedBy");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleUpdateHistories");
                });

            modelBuilder.Entity("Differences.Interaction.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime?>("LastUpdateTime");

                    b.Property<Guid?>("LastUpdatedBy");

                    b.Property<Guid>("OwnerId");

                    b.Property<int?>("ParentCommentId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Differences.Interaction.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime?>("LastUpdateTime");

                    b.Property<Guid?>("LastUpdatedBy");

                    b.Property<Guid>("OwnerId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Differences.Interaction.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("CreatedBy");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastUpdateTime");

                    b.Property<Guid?>("LastUpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Differences.Interaction.Models.Answer", b =>
                {
                    b.HasOne("Differences.Interaction.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Differences.Interaction.Models.Question")
                        .WithMany("Replies")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Differences.Interaction.Models.Article", b =>
                {
                    b.HasOne("Differences.Interaction.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Differences.Interaction.Models.ArticleUpdateHistory", b =>
                {
                    b.HasOne("Differences.Interaction.Models.Article")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Differences.Interaction.Models.Comment", b =>
                {
                    b.HasOne("Differences.Interaction.Models.Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Differences.Interaction.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Differences.Interaction.Models.Question", b =>
                {
                    b.HasOne("Differences.Interaction.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
